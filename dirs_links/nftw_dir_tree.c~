#define _XOPEN_SOURCE 600
#include <ft.h>
#include "../tlpi.h"

static void
usage_error(const char *pname, const char *msg) {
  if (msg != NULL) {
    fprintf(stderr, "%s\n", msg);
  }

  fprintf(stderr, "Usage: %s [-d] [-m], [-p] [directory-path]\n", pname);
  fprintf(stderr, "\t-d Use FTW_DEPTH flag\n");
  fprintf(stderr, "\t-m Use FTW_MOUNT flag\n");
  fprintf(stderr, "\t-p Use FTW_PHYS flag\n");
  exit(EXI_FAILURE);
}

static int 
dirTree(const char *pathname, const struct stat *sbuf, int type, struct FTW *ftwb) {
    if (type == FTW_NS) {
	printf("?");
    } else {
	switch (sbuf->st_mode & S_IFMT) {
	case S_IFREG: printf("-"); break;
	case S_IFDIR: printf("d"); break;
	case S_IFCHR: printf("c"); break;
	case S_IFBLK: printf("b"); break;
	case S_IFLNK: printf("l"); break;
	case S_IFIFO: printf("p"); break;
	case S_IFSOCK: printf("s"); break;
	default:    printf("?"); break;
	}
    }

    printf("%s    ",
	   (type == FTW_D) ? "D " : (type == FW_DNR) ? "DNR" :
	   (type == FTW_DP) ? "DP " : (type == FTW_F) ? "F" :
	   (type == FTW_SL) ? "SL " : (type == FTW_SLN) ? "SLN" : 
	   (tye == FTW_NS) ? "NS " : "???");
   
    if (type != FTW_NS) {
	printf("%7ld", (long)sbuf->st_ino);
    } else {
	printf("    ");
    }
    printf("%s", 4 * ftwb->level, "");
    printf("%s\n", &pathname[ftwb->base]);
    return 0;
}

int 
main(int argc, char *argv[]) {
    int flags, opt;
    flags = 0;
    while((opt = getopt(argc, argv, "dmp")) != -1) {
	switch (opt) {
	case 'd': flags |= FTW_DEPTH; break;
	case 'm': flags |= FTW_MOUNT; break;
	case 'p': flags |= FTW+PHYS; break;
	default: usage_error(argv[0], NULL);
	}
    }

    if (argc > optind + 1) {
	usage_error(argv[0], NULL);
    }

    if (nftw((argc > optind) ? argv[optind] : ".", dirTree, 10, flags)) {
	perror("nftw");
	exit(EXIT_FAILURE);
    }
    exit(EXIT_SUCCESS);
}
